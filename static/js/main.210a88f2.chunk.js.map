{"version":3,"sources":["Segments/Profile.js","Segments/AboutMe.js","Segments/Project.js","App.js","serviceWorker.js","index.js"],"names":["Profile","name","description","email","linkedIn","github","blog","Segment","style","padding","backgroundColor","color","className","textAlign","vertical","Image","circular","size","src","centered","Header","as","inverted","icon","Subheader","href","target","rel","Icon","AboutMe","List","Item","Project","array","chunk_size","header","project_history","background","rows","Array","Math","ceil","length","fill","undefined","map","_","index","begin","slice","items","idx","columns","item","Summary","split","l","Grid","Column","Url","push","Row","paddingLeft","paddingRight","paddingTop","marginBottom","celled","stackable","App","fun_history","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.210a88f2.chunk.js","sourcesContent":["import React from 'react';\nimport {Segment, Header, Icon, Image} from \"semantic-ui-react\";\n\nfunction Profile({name, description, email, linkedIn, github, blog}) {\n    return (\n        <Segment style={{padding: '3em 0em', backgroundColor: '#122442', color: 'rgba(255,255,255,0.9)'}}\n                 className={'profile'} textAlign='center' vertical>\n            <Image circular size='medium' src='./img/profile.jpg' centered/>\n            <Header as='h1' inverted icon>\n                {name}\n                <Header.Subheader>\n                    {description}\n                </Header.Subheader>\n            </Header>\n            <p>\n                <a href={`mailto:${email}`} target='_blank' rel='noopener noreferrer'><Icon name='mail outline'/>E-mail</a>\n                <a href={`https://www.linkedin.com/in/${linkedIn}`} target='_blank' rel='noopener noreferrer'><Icon\n                    name='linkedin'/>LinkedIn</a>\n                <a href={`https://www.github.com/${github}`} target='_blank' rel='noopener noreferrer'><Icon\n                    name='github'/>Github</a>\n                <a href={blog} target='_blank' rel='noopener noreferrer'><Icon name='linkify'/>Blog</a>\n            </p>\n        </Segment>\n    );\n}\n\nexport default Profile;\n","import React from 'react';\nimport {Header, List, Segment} from \"semantic-ui-react\";\n\nfunction AboutMe() {\n    return (\n        <Segment style={{padding: '2em 2em', backgroundColor: '#eee', color: 'rgba(51,51,51,0.9)'}}\n                 className={'about-me'} vertical>\n            <Header as='h1'>About Me</Header>\n            <Header as='h3'>History</Header>\n            <List>\n                <List.Item>2018.12. ~ now. Software Engineer</List.Item>\n                <List.Item>2016.11. ~ 2018.06. <a href='https://anyfi.io' target='_blank' rel='noopener noreferrer'>애니파이\n                    Anyfi</a> Software Engineer</List.Item>\n                <List.Item>2010.03. ~ 2017.08. 서울과학기술대학교 컴퓨터공학과 졸업</List.Item>\n                <List.Item>2007.03. ~ 2010.02. 서울디지텍고등학교 전자게임과 졸업</List.Item>\n            </List>\n            <Header as='h3'>Skill</Header>\n            <Header as='h4'>Main</Header>\n            <p>C#, C++, iOS(Objective-C, Swift), Android(JAVA), Unity3D, Docker</p>\n            <Header as='h4'>ETC</Header>\n            <p>Kubernetes, Python, MySQL, Node.js, jQuery, PHP, git, AWS, Firebase, Cocos2d-x...</p>\n        </Segment>\n    );\n}\n\nexport default AboutMe;\n","import React from 'react';\nimport {Grid, Header, Image, Segment, List} from \"semantic-ui-react\";\n\n// Reference: https://stackoverflow.com/questions/8495687/split-array-into-chunks#comment84212474_8495740\nconst arrayChunks = (array, chunk_size) =>\n    Array(Math.ceil(array.length / chunk_size)).fill(undefined).map((_, index) => index * chunk_size).map(begin => array.slice(begin, begin + chunk_size));\n\n\nfunction Project({header, project_history, background, color}) {\n    const rows = arrayChunks(project_history, 2).map((items, idx) => {\n        const columns = items.map((item, idx) => {\n            item.Summary = item.Summary.split('\\n').map((l, idx) => (<List.Item key={idx}>{l}</List.Item>));\n            return (\n                <Grid.Column key={idx} className={'project-item'}>\n                    <Image size='large' src={item.Image} centered/>\n                    <Header as='h3'>\n                        {item.Url ? <a href={item.Url} target='_blank'>{item.Header}</a> : item.Header}\n                    </Header>\n                    <List>\n                        {item.Summary}\n                    </List>\n                </Grid.Column>\n            );\n        });\n        if (columns.length === 1) {\n            columns.push((\n                <Grid.Column key={1} className={'project-item'} />\n            ));\n        }\n        return (\n            <Grid.Row key={idx}>\n                {columns}\n            </Grid.Row>\n        );\n    });\n\n    return (\n            <Segment style={{backgroundColor: background, color: color, paddingLeft:'2em', paddingRight:'2em'}} className={'project'} vertical>\n                <Header as='h1' style={{paddingTop:'0.4em', marginBottom:0}}>{header}</Header>\n                <Grid celled='internally' columns='equal' stackable>\n                    {rows}\n                </Grid>\n            </Segment>\n    );\n}\n\nexport default Project;\n","import React from 'react';\nimport './App.css';\nimport Profile from \"./Segments/Profile\";\nimport AboutMe from \"./Segments/AboutMe\";\nimport Project from \"./Segments/Project\";\nimport project_history from \"./project_history\";\nimport fun_history from \"./fun_history\";\n\n\nfunction App() {\n    return (\n        <div>\n          <Profile name={'Chanwoo Noh'} description={'Software Engineer'} email={'rajephon@gmail.com'}\n                   linkedIn={'chanwoo-noh-799b79141/'} github={'rajephon'} blog={'https://blog.rajephon.dev/'}/>\n          <AboutMe />\n          <Project header={'Project'} project_history={project_history}/>\n          <Project header={'For Fun'} project_history={fun_history} background={'#eee'} color='rgba(51,51,51,0.9)' />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}